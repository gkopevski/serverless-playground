
service: gkExampleService

provider:
  name: aws
  region: us-east-1
  runtime: nodejs4.3
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
      - "logs:CreateLogGroup"
      - "logs:CreateLogStream"
      - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"
    - Effect: Allow
      Action:
      - "sqs:ReceiveMessage"
      - "sqs:DeleteMessage"
      - "sqs:SendMessage"
      Resource: { "Fn::GetAtt": [ "TaskQueue", "Arn"]}
    - Effect: Allow
      Action:
      - "lambda:InvokeFunction"
      Resource: arn:aws:lambda:*:*:*

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

environment:
  region: eu-east-1
  taskQueue: {"Ref":"TaskQueue"}
  deadLetterQueue: {"Ref":"DeadLetterQueue"}
  name: staging


custom:
  deadLetterQueueName : example-playground-sync-dead-letter-queue-${opt:stage, self:provider.stage}
  taskQueueName: example-playground-sync-task-queue-${opt:stage, self:provider.stage}
  workerLambdaName: staging-SQS-worker
  consumerLambdaName: staging-SQS-consumer


functions:
  logevent:
    handler: logevent.logevent
    description: dummy example for get/post method from dynamoDB
    events:
      - http:
          path: logevent
          method: post
      - http:
          path: logevent
          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  migrator:
      name: staging-SQS-consumer
      handler: sqs/sqs-consumer.consume
      description: function for migration of data and testing purposes
      events:
        - http:
            path: migrate
            method: get
        - schedule:
            rate: rate(1 minute)
            enabled: true


  insertData:
    name: staging-SQS-worker
    handler: sqs/sqs-worker.work
    description: worker that will be invoked when the consumer will be called and insert data in dynamoDB
    events:
      - http:
          path: update
          method: post

  insertIntoSQS:
    name: insertSQSMessage
    handler: insertSQSMessage.insert
    description: dummy post request that is creating new sqs message and storing in the queue
    events:
      - http:
          path: insertSQSMessage
          method: post

resources:
  Resources:
      TaskQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName: ${self:custom.taskQueueName}
          MessageRetentionPeriod: '1209600'
          VisibilityTimeout: '60'
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
              - DeadLetterQueue
              - Arn
            maxReceiveCount: '10'
      DeadLetterQueue:
          Type: AWS::SQS::Queue
          Properties:
            QueueName: ${self:custom.deadLetterQueueName}
            MessageRetentionPeriod: '1209600'
      logRequestTableBackup:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: logRequestTableBackup
          AttributeDefinitions:
              - AttributeName: timeCreated
                AttributeType: S
          KeySchema:
              - AttributeName: timeCreated
                KeyType: HASH
          ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
#      logRequestTable:
#        Type: AWS::DynamoDB::Table
#        Properties:
#          TableName: logRequestTable
#          AttributeDefinitions:
#              - AttributeName: timeCreated
#                AttributeType: S
#          KeySchema:
#              - AttributeName: timeCreated
#                KeyType: HASH
#          ProvisionedThroughput:
#              ReadCapacityUnits: 1
#              WriteCapacityUnits: 1